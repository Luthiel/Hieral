关联订单明细表、订单表、订单明细活动关联表、订单明细优惠券关联表 四张事实业务表的 insert 操作
--> 形成下单明细表，写出 kafka 对应的主题

ttl -> time to live，存活时间，默认值为 0，表时用于不会清空状态
表状态的 ttl 指的是 idle 状态（即状态未更新）下的最短保留时间，设置 ttl 是为了避免无用状态堆积造成内存压力

ttl 的作用：
    - 合规性和数据隐私：如果数据处理受到特定的法律法规约束，可能需要在一定时间后删除个人信息。在这种情况下，设置TTL可以帮助自动遵守这些规定，减少合规风险。
    - 数据价值随时间降低：对于某些类型的数据，比如日志、事件数据或临时状态信息，其价值随时间迅速降低。在这些情况下，设置TTL可以确保过时的数据被自动清理，从而优化存储成本和查询性能。
    - 热数据和冷数据分离：在实时数仓中，经常访问的热数据和较少访问的冷数据应该分开存储。对于冷数据，可以设置TTL，将不再频繁访问的数据迁移到成本更低的存储介质上，或者在一定时间后自动删除。
    - 性能优化：对于需要快速读取和写入的实时数据处理系统，过量的数据可能会导致性能下降。通过设置TTL，可以确保系统只保留必要的数据量，从而保持高性能。
    - 避免无限状态增长：在流处理应用中，比如使用Apache Flink或Apache Kafka的应用，状态可能会随着时间无限增长。设置TTL可以帮助控制状态的大小，避免资源耗尽。
    - 缓存管理：如果实时数仓使用了缓存机制，TTL可以确保缓存中的数据不会过时，同时也能自动清理不再需要的缓存项。
    - 历史数据归档：对于需要长期保留的历史数据，可以设置TTL来将数据从在线存储转移到归档存储，或者在不同的存储层之间移动数据

需要关注的问题：数据的乱序问题，前面提到的有序指的是 “同一分区、同一并行度” 的数据有序
--> 在用户的下单操作中，需要考虑数据的乱序问题，因为同一张业务表的数据可能进入多个分区
（订单表的一条数据可能会对应对单明细表的多条数据，需要防止订单数据和订单明细数据到达时间的不一致问题，即可能两者 join 不上）

kafka topic_db --> filter 订单明细表 --------
             |                              | --> join
             | --> filter 订单表 ------------ -------------------
             |                              | --> join          |
             | --> filter 订单活动关联表 -----                    | --> join
             |                                                  |
             | --> filter 订单明细优惠券表 -----------------------

